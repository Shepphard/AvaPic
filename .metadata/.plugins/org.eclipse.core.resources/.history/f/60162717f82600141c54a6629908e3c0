package mp.edu.hs.trier.de.view.change.elements;

import java.awt.Graphics;
import java.awt.Polygon;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;

import javax.swing.BorderFactory;
import javax.swing.JComboBox;
import javax.swing.JPanel;
import javax.swing.border.Border;

import mp.edu.hs.trier.de.controller.parameters.ShapeController;
import mp.edu.hs.trier.de.model.IShapeModelChanged;
import mp.edu.hs.trier.de.model.ShapeModel;
import mp.edu.hs.trier.de.model.Shape;

@SuppressWarnings("serial")
public class ChangeShape extends JPanel implements ItemListener, IShapeModelChanged{

	private ShapeModel model;
	
	//Retrieve all the Shapes
	private Shape[] shapes = Shape.values();
	
	private ShapeController controller;
	private JComboBox<Shape> cBox;
	
	public ChangeShape(ShapeModel model)
	{
		this.model = model;
		this.cBox = new JComboBox<>();
		this.controller = new ShapeController(model);
		
		Border lineBorder = BorderFactory.createTitledBorder("Shape");
		setBorder(lineBorder);
		
		for(int i = 0; i < shapes.length; i++)
		{
			cBox.addItem(shapes[i]);
			
			if(model.getShape().equals(shapes[i]))
			{
				cBox.setSelectedIndex(i);
			}
		}

		cBox.addItemListener(this);
		
		
		add(cBox);
	}

	
	public void paintComponent(Graphics g)
	{
		int[][] res = polyPoints();
		Polygon p = new Polygon(polyPoint, ypoints, npoints)
	}
	
	private int[][] polyPoints()
	{
		Shape shape = model.getShape();
		int[][] result = new int[2][shape.getNumberOfPoints()];
		
		double degrees = 0;
		int numberOfPoints = shape.getNumberOfPoints();
		
		for(int i = 0; i < numberOfPoints; i++)
		{
			result[0][i] = (int)(10*Math.cos(degrees));
			result[1][i] = (int)(10*Math.sin(degrees));
			
			degrees += 2*Math.PI/numberOfPoints;
			
			
			//System.out.println("Point "+i+": ("+result[i][0]+", "+result[i][1]+") Â°="+degrees);
		}
		
		return result;
	}
	
	@Override
	public void itemStateChanged(ItemEvent evt) 
	{
		
		if(evt.getStateChange() == ItemEvent.SELECTED)
		{
			JComboBox<Shape> jcBox = (JComboBox<Shape>)evt.getSource();
			int selectedIndex = jcBox.getSelectedIndex();
			controller.setShape(shapes[selectedIndex]);
		}
		
	}

	@Override
	public void modelChanged() {
		cBox.setSelectedItem(model.getShape());
		
	}
	
}
