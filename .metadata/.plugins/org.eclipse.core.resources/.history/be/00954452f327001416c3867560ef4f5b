package mp.edu.hs.trier.de.controller.io;

import java.io.File;
import java.io.FileOutputStream;

import javax.xml.stream.XMLEventFactory;
import javax.xml.stream.XMLEventWriter;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.events.Characters;
import javax.xml.stream.events.EndElement;
import javax.xml.stream.events.StartDocument;
import javax.xml.stream.events.StartElement;
import javax.xml.stream.events.XMLEvent;

import mp.edu.hs.trier.de.model.ShapeModel;
import mp.edu.hs.trier.de.model.SettingsModel;

public class SaveFileController {

	private SettingsModel sm;
	private ShapeModel[] models;
	
	public SaveFileController(SettingsModel sm, ShapeModel...models)
	{
		this.sm = sm;
		this.models = models;
	}
	
	public void save(File file)
	{
		if(!sm.isSaved())
		{
			
			
			if(!file.getName().endsWith(".avatar"))
			{
				file = new File(file.getAbsolutePath()+".avatar");
			}
			
			this.sm.setFileName(file.getName());
			
			this.sm.setLocation(file.getParentFile());
			this.sm.setRenderLocation(new File(file.getParent()+"/render/"));
			
		}
		//modelsToXML
		
		//write them into File!
		
		this.sm.setSaved(true);
	}
	
	public void saveFile(File file) throws Exception {
	    // create an XMLOutputFactory
	    XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();
	    // create XMLEventWriter
	    XMLEventWriter eventWriter = outputFactory.createXMLEventWriter(new FileOutputStream(file));
	    // create an EventFactory
	    XMLEventFactory eventFactory = XMLEventFactory.newInstance();
	    XMLEvent end = eventFactory.createDTD("\n");
	    // create and write Start Tag
	    StartDocument startDocument = eventFactory.createStartDocument();
	    eventWriter.add(startDocument);

	    // create config open tag
	    StartElement configStartElement = eventFactory.createStartElement("",
	        "", "avatar");
	    eventWriter.add(configStartElement);
	    eventWriter.add(end);
	    // Write the different nodes
	    createNode(eventWriter, "mode", "1");
	    createNode(eventWriter, "unit", "901");
	    createNode(eventWriter, "current", "0");
	    createNode(eventWriter, "interactive", "0");

	    eventWriter.add(eventFactory.createEndElement("", "", "avatar"));
	    eventWriter.add(end);
	    eventWriter.add(eventFactory.createEndDocument());
	    eventWriter.close();
	  }

	  private void createNode(XMLEventWriter eventWriter, String name,
	      String value) throws XMLStreamException {

	    XMLEventFactory eventFactory = XMLEventFactory.newInstance();
	    XMLEvent end = eventFactory.createDTD("\n");
	    XMLEvent tab = eventFactory.createDTD("\t");
	    // create Start node
	    StartElement sElement = eventFactory.createStartElement("", "", name);
	    eventWriter.add(tab);
	    eventWriter.add(sElement);
	    // create Content
	    Characters characters = eventFactory.createCharacters(value);
	    eventWriter.add(characters);
	    // create End node
	    EndElement eElement = eventFactory.createEndElement("", "", name);
	    eventWriter.add(eElement);
	    eventWriter.add(end);

	  }
	
}
